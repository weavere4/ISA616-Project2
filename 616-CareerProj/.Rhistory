X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
dim(X)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
beta_hat = solve(t(X)%*% X) %*% (t(X)%*% y)
print(beta_hat)
dim(beta_hat)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
print(X)
dim(X)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
XTX = (t(X)%*% X)
print(XTX)
dim(XTX)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
XTY = (t(X)%*% y)
print(XTY)
dim(XTY)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
beta_hat = solve(t(X)%*% X) %*% (t(X)%*% y)
print(beta_hat)
dim(beta_hat)
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
summary(lm(y~0+X))
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
summary(lm(y~0+X))
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
options(scipens=999)
summary(lm(y~0+X))
X = matrix(c(1, 1, 1, 1, 1, 1, 1, 3032, 2058, 1780, 1638, 2196, 1966, 2216, 22221, 22912, 21345, 17342, 21786, 18902, 18639), nrow = 7)
y = c(360000, 340000, 250000, 205500, 275500, 248000, 229900)
options(scipen=999)
summary(lm(y~0+X))
cereal = read.csv("cereal.csv")
install.packages("interaction")
install.packages("sjPlot")
install.packages("mlbench")
library(mlbench)
## laod the Boston housing data
data("BostonHousing")
help(BostonHousing)
## Plot a scatterplot matrix
## all possible pairwise relationships
plot(BostonHousing)
## Plot a scatterplot matrix
## all possible pairwise relationships
plot(BostonHousing)
## Plot a scatterplot matrix
## all possible pairwise relationships
plot(BostonHousing)
reg_1order = lm(medv ~ ., data = BostonHousing)
summary(reg_1order)
anova(reg_1order)
formula(reg_1order)
final = lm(medv ~ crim + zn + indus + chas + nox + rm + indus + dis + rad +
tax + ptratio + b + lstat, data = BostonHousing)
summary(final)
anova(final)
final1 = lm(medv ~ crim + zn + indus + chas + nox + rm + dis + rad +
tax + ptratio + b + lstat, data = BostonHousing)
summary(final1)
anova(final1)
reg1 = lm(medv ~ (crim + zn + indus + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat)^2), data = BostonHousing)
summary(reg1)
reg1 = lm(medv ~ (crim + zn + indus + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat)^2, data = BostonHousing)
summary(reg1)
## plot lstat vs medv to check for nonlinearity
plot(BostonHousing$lstat, BostonHousing$medv)
plot(BostonHousing$crim, BostonHousing$medv)
reg2 = lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat + I(lstat)^2 + I(crim)^2 + chas:crim, data = BostonHousing)
summary(reg2)
reg2 = lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat + I(lstat)^2 + I(crim)^2 + chas:crim, data = BostonHousing)
summary(reg2)
reg2 = lm(medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat + I(lstat)^2 + I(crim)^2 + crim:chas, data = BostonHousing)
summary(reg2)
reg2 = lm(medv ~ crim + zn + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat + I(lstat)^2 + I(crim)^2 + crim:chas, data = BostonHousing)
summary(reg2)
reg2 = lm(medv ~ crim + zn + chas + nox + rm + age + dis + rad +
tax + ptratio + b + lstat + I(lstat^2) + I(crim^2) + crim:chas, data = BostonHousing)
summary(reg2)
## lstat (percentage of lower status)
## As the lower status of the population increaeses by 1%, then
## we estimate the median value of the homes to change by
## -1.730837 +2*.035182*lstat
## it depends on the same variable
## for example if lstat is 2
## effect pf increasing lstat by 1 (from 2 to 3)
-1.730837 +2*.035182*2
-1.730837 +2*.035182*4
red = read.csv("winequality-red.csv")
red = read.csv("winequality-red.csv")
red = read.csv("winequality-red.csv")
install.packages(‘tinytex’)
install.packages("tinytex")
updateR()
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
rm(list = ls()) # clear global environment
graphics.off() # close all graphics
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(DataExplorer,tidyverse,readxl,zoo,stargazer,kableExtra,skimr,plotly,ggpubr,vtable,tm)
data=readRDS(file = "FSB_BI_Survey_2019_2021.rds")
setwd("/Users/mollywimer/Documents/GitHub/ISA616-Project2-Group4/616-CareerProj")
setwd("/Users/mollywimer/Documents/GitHub/ISA616-Project2-Group4/616-CareerProj")
df = write.csv(data, "616-CareerProj 2/data.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
rate <- round(100*sum(!is.na(clean_data$survey_state)) / nrow(clean_data), 0)
gauge(rate, min = 0, max = 100,symbol = '%',
gaugeSectors(success = c(80,100), warning = c(40,79), danger = c(0,39)
)
)
rate <- round(100*sum(clean_data$survey_pref_loc==1)/nrow(clean_data),0)
gauge(rate, min = 0, max = 100,symbol = '%',
gaugeSectors(success = c(80,100), warning = c(40,79), danger = c(0,39)
)
)
install.packages("shiny")
# Assuming you have the shiny package installed and loaded
library(shiny)
install.packages("shiny")
install.packages("shiny")
10
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
install.packages("shiny")
# Assuming you have the shiny package installed and loaded
library(shiny)
# Create a shiny app
shinyApp(
ui = fluidPage(
# Add input elements for city and state filters
selectInput("city_filter", "Select City", choices = unique(clean_data$survey_city)),
selectInput("state_filter", "Select State", choices = unique(clean_data$survey_state)),
DTOutput("datatable")
),
server = function(input, output) {
# Define a reactive expression for filtered data
filtered_data <- reactive({
filter_data <- clean_data
# Apply city and state filters if selected
if (!is.null(input$city_filter)) {
filter_data <- filter_data %>% filter(survey_city == input$city_filter)
}
if (!is.null(input$state_filter)) {
filter_data <- filter_data %>% filter(survey_state == input$state_filter)
}
filter_data
})
# Render the DataTable with filtered data
output$datatable <- renderDT({
data <- filtered_data() %>%
group_by(survey_city, survey_state, major1) %>%
summarize(count = n()) %>%
arrange(major1, -count)
datatable(data, rownames = FALSE, extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c("copy", "csv", "excel")
),
filter = list(
position = 'bottom',
clear = FALSE,
plain = TRUE
)
)
})
}
)
state_counts <- as.data.frame(table(clean_data$survey_state))
colnames(state_counts) <- c("state", "Count")
state_counts <- subset(state_counts, nchar(as.character(state)) <= 2)
state_counts <- state_counts[!state_counts$state %in% c("OH", "IL"), ]
plot_usmap(data = state_counts, values = "Count", color = "black") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
# Assuming you have the shiny package installed and loaded
library(shiny)
# Create a shiny app
shinyApp(
ui = fluidPage(
# Add input elements for city and state filters
selectInput("city_filter", "Select City", choices = unique(clean_data$survey_city)),
selectInput("state_filter", "Select State", choices = unique(clean_data$survey_state)),
DTOutput("datatable")
),
server = function(input, output) {
# Define a reactive expression for filtered data
filtered_data <- reactive({
filter_data <- clean_data
# Apply city and state filters if selected
if (!is.null(input$city_filter)) {
filter_data <- filter_data %>% filter(survey_city == input$city_filter)
}
if (!is.null(input$state_filter)) {
filter_data <- filter_data %>% filter(survey_state == input$state_filter)
}
filter_data
})
# Render the DataTable with filtered data
output$datatable <- renderDT({
data <- filtered_data() %>%
group_by(survey_city, survey_state, major1) %>%
summarize(count = n()) %>%
arrange(major1, -count)
datatable(data, rownames = FALSE, extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c("copy", "csv", "excel")
),
filter = list(
position = 'bottom',
clear = FALSE,
plain = TRUE
)
)
})
}
)
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
# Assuming you have the shiny package installed and loaded
library(shiny)
# Create a shiny app
shinyApp(
ui = fluidPage(
# Add input elements for city and state filters
selectInput("city_filter", "Select City", choices = unique(clean_data$survey_city)),
selectInput("state_filter", "Select State", choices = unique(clean_data$survey_state)),
DTOutput("datatable")
),
server = function(input, output) {
# Define a reactive expression for filtered data
filtered_data <- reactive({
filter_data <- clean_data
# Apply city and state filters if selected
if (!is.null(input$city_filter)) {
filter_data <- filter_data %>% filter(survey_city == input$city_filter)
}
if (!is.null(input$state_filter)) {
filter_data <- filter_data %>% filter(survey_state == input$state_filter)
}
filter_data
})
# Render the DataTable with filtered data
output$datatable <- renderDT({
data <- filtered_data() %>%
group_by(survey_city, survey_state, major1) %>%
summarize(count = n()) %>%
arrange(major1, -count)
datatable(data, rownames = FALSE, extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c("copy", "csv", "excel")
),
filter = list(
position = 'bottom',
clear = FALSE,
plain = TRUE
)
)
})
}
)
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
# Assuming you have the shiny package installed and loaded
library(shiny)
library(DT)
# Create a shiny app
shinyApp(
ui = fluidPage(
# Add input elements for city and state filters
selectInput("city_filter", "Select City", choices = unique(clean_data$survey_city)),
selectInput("state_filter", "Select State", choices = unique(clean_data$survey_state)),
DTOutput("datatable")
),
server = function(input, output) {
# Define a reactive expression for filtered data
filtered_data <- reactive({
filter_data <- clean_data
# Apply city and state filters if selected
if (!is.null(input$city_filter)) {
filter_data <- filter_data %>% filter(survey_city == input$city_filter)
}
if (!is.null(input$state_filter)) {
filter_data <- filter_data %>% filter(survey_state == input$state_filter)
}
filter_data
})
# Render the DataTable with filtered data
output$datatable <- renderDT({
data <- filtered_data() %>%
group_by(survey_city, survey_state, major1) %>%
summarize(count = n()) %>%
arrange(major1, -count)
datatable(data, rownames = FALSE, extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c("copy", "csv", "excel")
),
filter = list(
position = 'bottom',
clear = FALSE,
plain = TRUE
)
)
})
}
)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
shiny,
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
p <- ggplot(clean_data, aes(x = clean_date$survey_state) +
geom_bar(color = "steelblue", fill = "steelblue") +
xlab("State") +
ylab("Number of Responses") +
theme_bw() +
theme(axis.text.x = element_text(vjust = 10, hjust = 10, angle = 90))
ggplotly(p)
p <- ggplot(clean_data, aes(x = survey_state) +
geom_bar(color = "steelblue", fill = "steelblue") +
xlab("State") +
ylab("Number of Responses") +
theme_bw() +
theme(axis.text.x = element_text(vjust = 10, hjust = 10, angle = 90))
ggplotly(p)
p <- ggplot(clean_data, aes(x=survey_state))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p <- ggplot(clean_data, aes(x= reoder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p <- ggplot(clean_data, aes(x= reoder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p <- ggplot(clean_data, aes(x= reorder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p <- ggplot(clean_data, aes(x= reorder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
ggplot2
shiny,
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE,cache = TRUE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
ggplot2,
shiny,
DT,
usmap,
geojsonio,
broom#for better tables
)
#read in data
clean_data =readRDS("Cleaned_Survey_Data.RDS")
p <- ggplot(clean_data, aes(x= reorder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
library(ggplot2)
library(plotly)
p <- ggplot(clean_data, aes(x= reorder(survey_state, -count))+
geom_bar(color="steelblue", fill="steelblue")+
xlab("State")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
